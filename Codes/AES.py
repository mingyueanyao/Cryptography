# 简化版AES
# 只实现加密部分
# 只实现128位的版本

s_box = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
         0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
         0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
         0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
         0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
         0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
         0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
         0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
         0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
         0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
         0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
         0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
         0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
         0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
         0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
         0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]

Rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]


# 把字符串转成16进制的
def str2hex(s):
    result = 0
    for c in s:
        result = (result << 8) + ord(c)

    return result

# 将16进制数变成字符串
# 字符串格式为"0x.. 0x.."
def hex2str(h):
    output_str_list = []
    for i in range(16):
        output_str_list.append(hex(h & 0xFF))
        h = h >> 8

    return ' '.join(output_str_list[::-1])


# matrix有四行，对应状态矩阵每一列
def text2mtx(text):
    text = str2hex(text)

    matrix = []
    for i in range(16):
        byte = (text >> (8 * (15 - i))) & 0xFF
        if i % 4 == 0:
            matrix.append([byte])
        else:
            matrix[i // 4].append(byte)
    
    return matrix

def mtx2text(matrix):
    text = 0
    for i in range(4):
        for j in range(4):
            text |= (matrix[i][j] << (120 - 8 *(4 * i + j)))

    return text


def byteSub(state):
    for i in range(4):
        for j in range(4):
            state[i][j] = s_box[state[i][j]]

def shiftRow(state):
    state[0][1], state[1][1], state[2][1], state[3][1] = state[1][1], state[2][1], state[3][1], state[0][1]
    state[0][2], state[1][2], state[2][2], state[3][2] = state[2][2], state[3][2], state[0][2], state[1][2]
    state[0][3], state[1][3], state[2][3], state[3][3] = state[3][3], state[0][3], state[1][3], state[2][3]

def addRoundKey(state, round_key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i][j]


xTimes = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)

def mixColumn(state):
    for i in range(4):
        mixSingleColumn(state[i])

def mixSingleColumn(s):
    t = s[0] ^ s[1] ^ s[2] ^ s[3]
    u = s[0] # 临时保存状态第一列用
    s[0] ^= t ^ xTimes(s[0] ^ s[1])
    s[1] ^= t ^ xTimes(s[1] ^ s[2])
    s[2] ^= t ^ xTimes(s[2] ^ s[3])
    s[3] ^= t ^ xTimes(s[3] ^ u)


def extendKey(key):
    round_keys = text2mtx(key)

    for i in range(4, 4 * 11):
        round_keys.append([])
        if i % 4 == 0:
            # 第二个字节异或上Rcon，隐含做了循环左移
            byte = round_keys[i - 4][0] ^ s_box[round_keys[i - 1][1]] ^ Rcon[i // 4]
            round_keys[i].append(byte)

            for j in range(1, 4):
                byte = round_keys[i - 4][j] ^ s_box[round_keys[i - 1][(j + 1) % 4]]
                round_keys[i].append(byte)   
        else:
            for j in range(4):
                byte = round_keys[i - 4][j] ^ round_keys[i - 1][j]
                round_keys[i].append(byte)

    return round_keys


def round(state, k):
    byteSub(state)
    shiftRow(state)
    mixColumn(state)
    addRoundKey(state, k)


def finalRound(state, k):
    byteSub(state)
    shiftRow(state)
    addRoundKey(state, k)


def aesEncrypt(message, key):
    state = text2mtx(message)
    round_keys = extendKey(key)

    addRoundKey(state, round_keys[:4])

    for i in range(1, 10):
        round(state, round_keys[i * 4 : (i + 1) * 4])

    finalRound(state, round_keys[40:])

    return hex2str(mtx2text(state))

def run_aesEncrypt(text, key):
    length = len(text)
    if (length % 16) != 0:
        # 不足128比特的分组用空格补齐
        text = text + (16 - length % 16) * " "

    result = []
    for i in range(int(len(text) / 16)):
        sub_text = text[i * 16 : (i + 1) * 16]
        sub_result = aesEncrypt(sub_text, key)
        result.append(sub_result)

    return ' '.join(result)


if __name__ == '__main__':
    text = input('please input a text to AES to encrypt: ')

    key = input('please input key (must be 16 characters): ')
    while len(key) != 16:
        key = input('please input key (must be 16 characters): ')

    print('AES encrypt result:', run_aesEncrypt(text, key))